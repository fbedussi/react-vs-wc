{"version":3,"sources":["utils.js","GridElement.js","App.js","serviceWorker.js","index.js"],"names":["randomRgbVal","Math","floor","random","numberOfRandomElements","numberOfGridElements","refreshRandomElements","Array","from","length","width","color","concat","getNewState","GridElement","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","refreshState","setState","setTimeout","bind","style","display","height","backgroundColor","react_default","a","createElement","Component","App","randomElements","gridElements","setInterval","elements","className","map","dummy","i","src_GridElement","key","el","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAAaA,EAAe,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,WACrCC,EAAyB,GACzBC,EAAuB,IAE7B,SAASC,IACd,OAAOC,MAAMC,KAAK,CAACC,OAAQL,GAAyB,iBAAO,CACzDM,MAAOT,KAAKC,MAAsB,GAAhBD,KAAKE,UACvBQ,MAAK,OAAAC,OAASZ,IAAT,MAAAY,OAA4BZ,IAA5B,MAAAY,OAA+CZ,IAA/C,QCJT,SAASa,IACP,MAAO,CACLH,MAAOT,KAAKC,MAAsB,GAAhBD,KAAKE,UACvBQ,MAAK,OAAAC,OAASZ,IAAT,MAAAY,OAA4BZ,IAA5B,MAAAY,OAA+CZ,IAA/C,UAiCMc,cA5Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQT,IAHDE,mFAQZG,KAAKK,sDAILL,KAAKM,SAASX,KACdY,WAAWP,KAAKK,aAAaG,KAAKR,MAAOjB,KAAKC,MAAoB,IAAdD,KAAKE,0CAIzD,IAAMwB,EAAQ,CACZC,QAAS,eACTC,OAAQ,OACRnB,MAAK,GAAAE,OAAKM,KAAKI,MAAMZ,MAAhB,MACLoB,gBAAiBZ,KAAKI,MAAMX,OAG9B,OAAQoB,EAAAC,EAAAC,cAAA,QAAMN,MAAOA,WAzBCO,aC4BXC,cAjCb,SAAAA,IAAc,IAAApB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,IACZpB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,KAAAH,QAEKI,MAAQ,CACXc,eAAgB9B,IAChB+B,aFEG9B,MAAMC,KAAK,CAACC,OAAQJ,GAAuB,kBAAM,QECtDiC,YAAY,WACVvB,EAAKS,SAAS,CAACe,SAAUjC,OACxB,KAVSS,wEAcZ,OACEgB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,aAAArB,OAAQP,EAAR,oDACCa,KAAKI,MAAMe,aAAaI,IAAI,SAACC,EAAOC,GAAR,OAAeZ,EAAAC,EAAAC,cAACW,EAAD,CAAaC,IAAKF,MAC9DZ,EAAAC,EAAAC,cAAA,aAAArB,OAAQR,EAAR,oDACCc,KAAKI,MAAMc,eAAeK,IAAI,SAACK,EAAIH,GAClC,IAAMhB,EAAQ,CACZC,QAAS,eACTC,OAAQ,OACRnB,MAAK,GAAAE,OAAKkC,EAAGpC,MAAR,MACLoB,gBAAiBgB,EAAGnC,OAEtB,OAAOoB,EAAAC,EAAAC,cAAA,QAAMY,IAAKF,EAAGhB,MAAOA,cA3BpBO,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bd00b34.chunk.js","sourcesContent":["export const randomRgbVal = () => Math.floor(Math.random() * 256);\nexport const numberOfRandomElements = 50;\nexport const numberOfGridElements = 5000;\n\nexport function refreshRandomElements () {\n  return Array.from({length: numberOfRandomElements}, () => ({\n    width: Math.floor(Math.random() * 80), \n    color: `rgb(${randomRgbVal()}, ${randomRgbVal()}, ${randomRgbVal()})`\n  }));\n}\n\nexport function getGridElements() {\n  return Array.from({length: numberOfGridElements}, () => null);\n}\n","import React, { Component } from 'react';\nimport {randomRgbVal} from './utils';\n\nfunction getNewState () {\n  return {\n    width: Math.floor(Math.random() * 80), \n    color: `rgb(${randomRgbVal()}, ${randomRgbVal()}, ${randomRgbVal()})`\n  };\n}\n\nclass GridElement extends Component {\n  constructor() {\n    super();\n\n    this.state = getNewState();\n\n  }\n  \n  componentDidMount() {\n    this.refreshState();\n  }\n\n  refreshState() {\n    this.setState(getNewState());\n    setTimeout(this.refreshState.bind(this), Math.floor(Math.random * 500));\n  }\n\n  render() {\n    const style = {\n      display: 'inline-block', \n      height: '30px', \n      width: `${this.state.width}px`, \n      backgroundColor: this.state.color\n    };\n\n    return (<span style={style}></span>)\n  }\n}\n\nexport default GridElement;\n","import React, { Component } from 'react';\nimport GridElement from './GridElement';\nimport {refreshRandomElements, getGridElements, numberOfGridElements, numberOfRandomElements} from './utils';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      randomElements: refreshRandomElements(),\n      gridElements: getGridElements(),\n    }\n\n    setInterval(() => {\n      this.setState({elements: refreshRandomElements()});\n    }, 500);\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{`${numberOfGridElements} elements refreshing indipendently and randomly`}</h1>\n        {this.state.gridElements.map((dummy, i) => (<GridElement key={i}/>))}\n        <h1>{`${numberOfRandomElements} elements refreshing randomly but all toghether`}</h1>\n        {this.state.randomElements.map((el, i) => {\n          const style = {\n            display: 'inline-block', \n            height: '30px', \n            width: `${el.width}px`, \n            backgroundColor: el.color\n          };\n          return <span key={i} style={style}></span>\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}